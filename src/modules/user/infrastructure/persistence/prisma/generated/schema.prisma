// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/modules/user/infrastructure/persistence/prisma/generated"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ===============================
//       RELATIONAL SCHEMA
// ===============================
// model User {
//   id        String    @id @default(cuid())
//   firstName String    @db.VarChar(255) // Assuming first and last names are required
//   lastName  String    @db.VarChar(255) // Assuming first and last names are required
//   dni       String    @unique @db.VarChar(8) // Assuming DNI is a unique identifier like a national ID
//   address   String?   @db.VarChar(255) // Optional address field
//   phone     String?   @db.VarChar(20) // Optional phone field
//   pictures  String[]  @db.VarChar(255) // Optional array of picture URLs
//   birthDate DateTime? @db.Date // Optional birth date field
//   status    String    @unique @default("active") // Assuming status can be 'active', 'inactive', etc.

//   email     String   @unique
//   password  String   @db.VarChar(255) // Assuming password is stored as a hash
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// ===============================
//       EMBEDDED SCHEMA
// ===============================

model User {
  id        String    @id @default(cuid()) @map("_id")
  firstName String // Assuming first and last names are required
  lastName  String // Assuming first and last names are required
  dni       String    @unique // Assuming DNI is a unique identifier like a national ID
  address   String? // Optional address field
  phone     String? // Optional phone field
  pictures  String[] // Optional array of picture URLs
  birthDate DateTime? // Optional birth date field
  status    String    @unique @default("active") // Assuming status can be 'active', 'inactive', etc.

  emails    String[] @default([])
  password  String // Assuming password is stored as a hash
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
